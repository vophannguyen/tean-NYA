generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  email String @unique
  firstName String
  lastName String
  items    Item[]
  reservation Reservation[]
  paymentHistory Payment[]
  solditem SoldItem[]
  order Order[]
}

model Order{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  createAt DateTime @default(now())
  itemOrder ItemOrder[]
  receipt Receipt []
}
model Receipt{
  id Int @id @default(autoincrement())
  subTotal Float
  saleTax Float
  total Float
  orderId Int
  order Order @relation(fields: [orderId],references: [id],onDelete: Cascade)
}
model ItemOrder{
  id Int @id @default(autoincrement())
  title String
  category String
  description String
  quantity Int
  price Float @default(0.0)
  upload String?
  time DateTime
  address1 String
  address2 String @default(" ")
  city String
  state String
  zip String
  country String
  orderId Int
  order Order @relation(fields: [orderId],references: [id],onDelete: Cascade)
}
model SoldItem{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  createAt DateTime @default(now())
  title String
  description String
  price Float
  upload String?
  time DateTime
  category String
}
model Payment{
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  createAt DateTime @default(now())
  method String
  nameOnCard String
  cardNumber String
  securityCode String
  experiedDay String
}
model Reservation{
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  userId Int
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  itemId Int
  item Item @relation(fields: [itemId],references: [id],onDelete: Cascade)
}
model Item {
  id          Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  title String
  category String
  description String
  price Float @default(0.0)
  upload String?
  isReservation Boolean @default(false)
  time DateTime
  quantity Int 
  address1 String
  address2 String @default(" ")
  city String
  state String
  zip String
  country String
  reservation Reservation[]
  userId      Int
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
